# Copy these contents into the root directory of your Github project in a file
# named .travis.yml

# Use new container infrastructure to enable caching
sudo: false

# Choose a lightweight base image; we provide our own build tools.
language: c

addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - libgmp-dev
    - libmpfr-dev
    - libmpc-dev
    - binutils-dev
    - g++-4.7
    - gcc

# Caching so the next build will be fast too.
cache:
  directories:
  - $HOME/.ghc
  - $HOME/.cabal
  - $HOME/.stack

# The different configurations we want to test. We have BUILD=cabal which uses
# cabal-install, and BUILD=stack which uses Stack. More documentation on each
# of those below.
#
# We set the compiler values here to tell Travis to use a different
# cache file per set of arguments.
#
# If you need to have different apt packages for each combination in the
# matrix, you can use a line such as:
#     addons: {apt: {packages: [libfcgi-dev,libgmp-dev]}}
matrix:
  include:
  # We grab the appropriate GHC and cabal-install versions from hvr's PPA. See:
  # https://github.com/hvr/multi-ghc-travis
  #- env: BUILD=cabal GHCVER=7.0.4 CABALVER=1.16 HAPPYVER=1.19.5 ALEXVER=3.1.7
  #  compiler: ": #GHC 7.0.4"
  #  addons: {apt: {packages: [cabal-install-1.16,ghc-7.0.4,happy-1.19.5,alex-3.1.7], sources: [hvr-ghc, ubuntu-toolchain-r-test]}}
  #- env: BUILD=cabal GHCVER=7.2.2 CABALVER=1.16 HAPPYVER=1.19.5 ALEXVER=3.1.7
  #  compiler: ": #GHC 7.2.2"
  #  addons: {apt: {packages: [cabal-install-1.16,ghc-7.2.2,happy-1.19.5,alex-3.1.7], sources: [hvr-ghc, ubuntu-toolchain-r-test]}}
  - env: BUILD=cabal CABALVER=1.24 GHCVER=7.8.4 STACK_YAML=stack-7.8.yaml
    compiler: ": #GHC 7.8.4"
    addons: {apt: {packages: [libgmp-dev,
                              libmpfr-dev,
                              libmpc-dev,
                              binutils-dev,
                              g++-4.7,
                              gcc, cabal-install-1.24,ghc-7.8.4,happy-1.19.5,alex-3.1.7], sources: [hvr-ghc, ubuntu-toolchain-r-test]}}
  - env: BUILD=cabal CABALVER=1.22 GHCVER=7.10.3
    compiler: ": #GHC 7.10.3"
    addons: {apt: {packages: [libgmp-dev,
                              libmpfr-dev,
                              libmpc-dev,
                              binutils-dev,
                              g++-4.7,
                              gcc, cabal-install-1.22,ghc-7.10.3,happy-1.19.5,alex-3.1.7], sources: [hvr-ghc, ubuntu-toolchain-r-test]}}
  - env: BUILD=cabal CABALVER=1.24 GHCVER=8.0.1
    compiler: ": #GHC 8.0.1"
    addons: {apt: {packages: [libgmp-dev,
                              libmpfr-dev,
                              libmpc-dev,
                              binutils-dev,
                              g++-4.7,
                              gcc, cabal-install-1.24,ghc-8.0.1,happy-1.19.5,alex-3.1.7], sources: [hvr-ghc, ubuntu-toolchain-r-test]}}

  # The Stack builds. We can pass in arbitrary Stack arguments via the ARGS
  # variable, such as using --stack-yaml to point to a different file.
  - env: BUILD=stack ARGS=" "
    compiler: ": #stack default"
    addons: {apt: {packages: [libgmp-dev,
                              libmpfr-dev,
                              libmpc-dev,
                              binutils-dev,
                              g++-4.7,
                              gcc, ghc-7.10.3], sources: [hvr-ghc, ubuntu-toolchain-r-test]}}

  - env: BUILD=stack ARGS="--resolver lts-2"
    compiler: ": #stack 7.8.4"
    addons: {apt: {packages: [libgmp-dev,
                              libmpfr-dev,
                              libmpc-dev,
                              binutils-dev,
                              g++-4.7,
                              gcc, ghc-7.8.4], sources: [hvr-ghc, ubuntu-toolchain-r-test]}}

  - env: BUILD=stack ARGS="--resolver lts-3"
    compiler: ": #stack 7.10.2"
    addons: {apt: {packages: [libgmp-dev,
                              libmpfr-dev,
                              libmpc-dev,
                              binutils-dev,
                              g++-4.7,
                              gcc, ghc-7.10.2], sources: [hvr-ghc, ubuntu-toolchain-r-test]}}

  - env: BUILD=stack ARGS="--resolver lts-5"
    compiler: ": #stack 7.10.3"
    addons: {apt: {packages: [libgmp-dev,
                              libmpfr-dev,
                              libmpc-dev,
                              binutils-dev,
                              g++-4.7,
                              gcc, ghc-7.10.3], sources: [hvr-ghc, ubuntu-toolchain-r-test]}}

  # Nightly builds are allowed to fail
  - env: BUILD=stack ARGS="--resolver nightly"
    compiler: ": #stack nightly"
    addons: {apt: {packages: [libgmp-dev,
                              libmpfr-dev,
                              libmpc-dev,
                              binutils-dev,
                              g++-4.7,
                              gcc, libgmp-dev]}}

  # Build on OS X in addition to Linux
  - env: BUILD=stack ARGS=" "
    compiler: ": #stack default osx"
    os: osx

  - env: BUILD=stack ARGS="--resolver lts-2"
    compiler: ": #stack 7.8.4 osx"
    os: osx

  - env: BUILD=stack ARGS="--resolver lts-3"
    compiler: ": #stack 7.10.2 osx"
    os: osx

  - env: BUILD=stack ARGS="--resolver lts-5"
    compiler: ": #stack 7.10.3 osx"
    os: osx

  - env: BUILD=stack ARGS="--resolver nightly"
    compiler: ": #stack nightly osx"
    os: osx

  allow_failures:
  - env: BUILD=cabal GHCVER=head  CABALVER=head HAPPYVER=1.19.5 ALEXVER=3.1.7
  - env: BUILD=stack ARGS="--resolver nightly"


install:
# SYMENGINE INSTALL PHASE
# -----------------------
# Download and install SymEngine
- cd $HOME && git clone https://github.com/symengine/symengine.git
 
# Setup C compiler variables
# The reason we need to do this is because our build system is haskell, so none of the 
# C variables are set.
- |
  if [ `uname` = "Darwin" ]
  then
    export CC="clang" && export CXX="clang++"
  else
    export CC="gcc" && export CXX="g++-4.7"  
  fi

- |
  set -ex
  export TEST_CPP="no"
  cd $HOME/symengine
  source bin/install_travis.sh
  bin/test_travis.sh

# EXPORT PHASE
# ------------
# Export environment variables related to SymEngine's library and includes
- |
   # $our_install_dir is exported by test_travis.sh from symengine
   set -ex
   export SYMENGINE_LIB_ARGS="--extra-lib-dirs=$our_install_dir/lib/"  
   export SYMENGINE_INCLUDE_ARGS="--extra-include-dirs=$our_install_dir/include/"
   cd $TRAVIS_BUILD_DIR

# GHC INSTALL PHASE
# -----------------
# Install Stack if needed, then install GHC

# Using compiler above sets CC to an invalid value, so unset it
- unset CC
# We want to always allow newer versions of packages when building on GHC HEAD
- CABALARGS=""
- if [ "x$GHCVER" = "xhead" ]; then CABALARGS=--allow-newer; fi

# Download and unpack the stack executable
- export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$HOME/.local/bin:/opt/alex/$ALEXVER/bin:/opt/happy/$HAPPYVER/bin:$HOME/.cabal/bin:$PATH
# add cabal install path
- export PATH=PATH="$HOME/.cabal/bin:$PATH"
- mkdir -p ~/.local/bin
- |
  if [ `uname` = "Darwin" ]
  then
    travis_retry curl --insecure -L https://www.stackage.org/stack/osx-x86_64 | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
  else
    travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
  fi
  # Use the more reliable S3 mirror of Hackage
  mkdir -p $HOME/.cabal
  echo 'remote-repo: hackage.haskell.org:http://hackage.fpcomplete.com/' > $HOME/.cabal/config
  echo 'remote-repo-cache: $HOME/.cabal/packages' >> $HOME/.cabal/config

  if [ "$CABALVER" != "1.16" ]
  then
    echo 'jobs: $ncpus' >> $HOME/.cabal/config
  fi

# Get the list of packages from the stack.yaml file
- PACKAGES=$(stack --install-ghc query locals | grep '^ *path' | sed 's@^ *path:@@')

- echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
- if [ -f configure.ac ]; then autoreconf -i; fi
- |
  set -ex
  case "$BUILD" in
    stack)
      stack --no-terminal --install-ghc $ARGS test --only-dependencies
      ;;
    cabal)
      cabal --version
      travis_retry cabal update
      cabal install --only-dependencies --enable-tests --enable-benchmarks --force-reinstalls --ghc-options=-O0 --reorder-goals --max-backjumps=-1 $CABALARGS $PACKAGES $SYMENGINE_LIB_ARGS $SYMENGINE_INCLUDE_ARGS
      ;;
  esac
  set +ex


script:
- |
  set -ex
  case "$BUILD" in
    stack)
      stack --no-terminal $ARGS $SYMENGINE_LIB_ARGS $SYMENGINE_INCLUDE_ARGS test --haddock --no-haddock-deps
      ;;
    cabal)
      cabal update
      cabal configure --enable-tests --enable-benchmarks --ghc-options=-O0 $CABALARGS  $SYMENGINE_LIB_ARGS $SYMENGINE_INCLUDE_ARGS
      cabal build
      # run the test suite
      cabal test --show-details=always

      # install after building the library
      # cabal install --enable-tests --enable-benchmarks --force-reinstalls --ghc-options=-O0 --reorder-goals --max-backjumps=-1 $CABALARGS $PACKAGES $SYMENGINE_LIB_ARGS $SYMENGINE_INCLUDE_ARGS

      ORIGDIR=$(pwd)
      for dir in $PACKAGES
      do
        cd $dir
        cabal check || [ "$CABALVER" == "1.16" ]
        cabal sdist
        SRC_TGZ=$(cabal info . | awk '{print $2;exit}').tar.gz && \
          (cd dist && cabal install --force-reinstalls "$SRC_TGZ")
        cd $ORIGDIR
      done
      ;;
  esac
  set +ex
