name: CI

# Trigger the workflow on push or pull request, but only for the master branch
on:
  pull_request:
  push:
    branches: [master]

jobs:
  build:
    name: Building on ${{ matrix.os }} with ghc-${{ matrix.ghc }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            cabal: latest
            ghc: "8.10.7"
          - os: macos-latest
            cabal: latest
            ghc: "8.10.7"
    steps:
    - uses: actions/checkout@v2
    - uses: haskell/actions/setup@v1
      name: Setup Haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}
    - uses: actions/cache@v3
      name: Cache ~/.cabal/store
      with:
        path: ~/.cabal/store
        key: ${{ runner.os }}-${{ matrix.ghc }}-cabal

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          cmake ninja-build g++ libboost-all-dev
    - name: Install system dependencies (MacOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake ninja boost

    - uses: actions/cache@v3
      name: Cache /opt/symengine
      id: cache-symengine
      with:
        path: /opt/symengine
        key: ${{ runner.os }}-symengine

    - name: Build C++ code
      if: steps.cache-symengine.outputs.cache-hit != 'true'
      run: |
        cd $GITHUB_WORKSPACE
        git clone --depth=1 https://github.com/symengine/symengine
        cd symengine
        cmake -B build -G Ninja \
          -DCMAKE_INSTALL_PREFIX=/opt/symengine \
          -DCMAKE_BUILD_TYPE=Debug \
          -DBUILD_SHARED_LIBS=ON \
          -DWITH_SYMENGINE_THREAD_SAFE=ON \
          -DBUILD_TESTS=OFF \
          -DBUILD_BENCHMARKS=OFF \
          -DINTEGER_CLASS=boostmp
        cmake --build build
        cmake --build build --target test
        sudo cmake --build build --target install

    - name: Build Haskell code
      run: |
        echo "package symengine" >> cabal.project.local
        echo "  extra-lib-dirs: /opt/symengine/lib" >> cabal.project.local
        echo "  extra-include-dirs: /opt/symengine/include" >> cabal.project.local
        cabal build

    - name: Test
      run: |
        export LD_LIBRARY_PATH=/opt/symengine/lib:$LD_LIBRARY_PATH
        export DYLD_LIBRARY_PATH=/opt/symengine/lib:$DYLD_LIBRARY_PATH
        cabal test --test-show-details=direct
